// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/organization/organization.proto

package go_micro_srv_organization

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Organization struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Phone                string   `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Owner                string   `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Organization) Reset()         { *m = Organization{} }
func (m *Organization) String() string { return proto.CompactTextString(m) }
func (*Organization) ProtoMessage()    {}
func (*Organization) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1930da9a4a64312, []int{0}
}

func (m *Organization) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Organization.Unmarshal(m, b)
}
func (m *Organization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Organization.Marshal(b, m, deterministic)
}
func (m *Organization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Organization.Merge(m, src)
}
func (m *Organization) XXX_Size() int {
	return xxx_messageInfo_Organization.Size(m)
}
func (m *Organization) XXX_DiscardUnknown() {
	xxx_messageInfo_Organization.DiscardUnknown(m)
}

var xxx_messageInfo_Organization proto.InternalMessageInfo

func (m *Organization) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Organization) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Organization) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Organization) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1930da9a4a64312, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Organization)(nil), "go.micro.srv.organization.Organization")
	proto.RegisterType((*Response)(nil), "go.micro.srv.organization.Response")
}

func init() {
	proto.RegisterFile("proto/organization/organization.proto", fileDescriptor_b1930da9a4a64312)
}

var fileDescriptor_b1930da9a4a64312 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x2f, 0x4a, 0x4f, 0xcc, 0xcb, 0xac, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0x43, 0xe1,
	0xe8, 0x81, 0xe5, 0x85, 0x24, 0xd3, 0xf3, 0xf5, 0x72, 0x33, 0x93, 0x8b, 0xf2, 0xf5, 0x8a, 0x8b,
	0xca, 0xf4, 0x90, 0x15, 0x28, 0xc5, 0x71, 0xf1, 0xf8, 0x23, 0xf1, 0x85, 0xf8, 0xb8, 0x98, 0x32,
	0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x98, 0x32, 0x53, 0x84, 0x84, 0xb8, 0x58, 0xf2,
	0x12, 0x73, 0x53, 0x25, 0x98, 0xc0, 0x22, 0x60, 0xb6, 0x90, 0x08, 0x17, 0x6b, 0x41, 0x46, 0x7e,
	0x5e, 0xaa, 0x04, 0x33, 0x58, 0x10, 0xc2, 0x01, 0x89, 0xe6, 0x97, 0xe7, 0xa5, 0x16, 0x49, 0xb0,
	0x40, 0x44, 0xc1, 0x1c, 0x25, 0x2e, 0x2e, 0x8e, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54,
	0xa3, 0xd9, 0xcc, 0x5c, 0xc2, 0xc8, 0x96, 0x05, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0x45,
	0x70, 0xb1, 0x39, 0x17, 0xa5, 0x26, 0x96, 0xa4, 0x0a, 0xa9, 0xeb, 0xe1, 0x74, 0xa9, 0x1e, 0xb2,
	0x4e, 0x29, 0x65, 0x3c, 0x0a, 0x61, 0xf6, 0x29, 0x31, 0x08, 0x85, 0x72, 0x31, 0xbb, 0xa7, 0x96,
	0x50, 0xdd, 0xd8, 0x2c, 0x2e, 0x09, 0xf7, 0xd4, 0x12, 0x64, 0x9d, 0x8e, 0x29, 0x29, 0x45, 0xa9,
	0xc5, 0xc5, 0xa9, 0xc5, 0x54, 0xb7, 0x2b, 0x9d, 0x4b, 0x14, 0xcd, 0xae, 0x00, 0x50, 0x70, 0x53,
	0xdd, 0xa2, 0x24, 0x36, 0x70, 0x5a, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x31, 0x80, 0xf2,
	0xe5, 0x54, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OrganizationService service

type OrganizationServiceClient interface {
	Create(ctx context.Context, in *Organization, opts ...client.CallOption) (*Response, error)
	Get(ctx context.Context, in *Organization, opts ...client.CallOption) (*Response, error)
	GetOrganizationAddresses(ctx context.Context, in *Organization, opts ...client.CallOption) (*Response, error)
	GetOrganizationPhones(ctx context.Context, in *Organization, opts ...client.CallOption) (*Response, error)
}

type organizationServiceClient struct {
	c           client.Client
	serviceName string
}

func NewOrganizationServiceClient(serviceName string, c client.Client) OrganizationServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.organization"
	}
	return &organizationServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *organizationServiceClient) Create(ctx context.Context, in *Organization, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "OrganizationService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) Get(ctx context.Context, in *Organization, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "OrganizationService.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetOrganizationAddresses(ctx context.Context, in *Organization, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "OrganizationService.GetOrganizationAddresses", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetOrganizationPhones(ctx context.Context, in *Organization, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "OrganizationService.GetOrganizationPhones", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrganizationService service

type OrganizationServiceHandler interface {
	Create(context.Context, *Organization, *Response) error
	Get(context.Context, *Organization, *Response) error
	GetOrganizationAddresses(context.Context, *Organization, *Response) error
	GetOrganizationPhones(context.Context, *Organization, *Response) error
}

func RegisterOrganizationServiceHandler(s server.Server, hdlr OrganizationServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&OrganizationService{hdlr}, opts...))
}

type OrganizationService struct {
	OrganizationServiceHandler
}

func (h *OrganizationService) Create(ctx context.Context, in *Organization, out *Response) error {
	return h.OrganizationServiceHandler.Create(ctx, in, out)
}

func (h *OrganizationService) Get(ctx context.Context, in *Organization, out *Response) error {
	return h.OrganizationServiceHandler.Get(ctx, in, out)
}

func (h *OrganizationService) GetOrganizationAddresses(ctx context.Context, in *Organization, out *Response) error {
	return h.OrganizationServiceHandler.GetOrganizationAddresses(ctx, in, out)
}

func (h *OrganizationService) GetOrganizationPhones(ctx context.Context, in *Organization, out *Response) error {
	return h.OrganizationServiceHandler.GetOrganizationPhones(ctx, in, out)
}
